// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux(a=a[0],b=b[0],sel=sel[0],out=a0);
    Mux(a=a[1],b=b[1],sel=sel[0],out=a1);
    Mux(a=a[2],b=b[2],sel=sel[0],out=a2);
    Mux(a=a[3],b=b[3],sel=sel[0],out=a3);
    Mux(a=a[4],b=b[4],sel=sel[0],out=a4);
    Mux(a=a[5],b=b[5],sel=sel[0],out=a5);
    Mux(a=a[6],b=b[6],sel=sel[0],out=a6);
    Mux(a=a[7],b=b[7],sel=sel[0],out=a7);
    Mux(a=a[8],b=b[8],sel=sel[0],out=a8);
    Mux(a=a[9],b=b[9],sel=sel[0],out=a9);
    Mux(a=a[10],b=b[10],sel=sel[0],out=a10);
    Mux(a=a[11],b=b[11],sel=sel[0],out=a11);
    Mux(a=a[12],b=b[12],sel=sel[0],out=a12);
    Mux(a=a[13],b=b[13],sel=sel[0],out=a13);
    Mux(a=a[14],b=b[14],sel=sel[0],out=a14);
    Mux(a=a[15],b=b[15],sel=sel[0],out=a15);
	
	
	Mux(a=c[0], b=d[0], sel=sel[0],out=c0);
    Mux(a=c[1], b=d[1], sel=sel[0],out=c1);
    Mux(a=c[2], b=d[2], sel=sel[0],out=c2);
    Mux(a=c[3], b=d[3], sel=sel[0],out=c3);
    Mux(a=c[4], b=d[4], sel=sel[0],out=c4);
    Mux(a=c[5], b=d[5], sel=sel[0],out=c5);
    Mux(a=c[6], b=d[6], sel=sel[0],out=c6);
    Mux(a=c[7], b=d[7], sel=sel[0],out=c7);
    Mux(a=c[8], b=d[8], sel=sel[0],out=c8);
    Mux(a=c[9], b=d[9], sel=sel[0],out=c9);
    Mux(a=c[10],b=d[10],sel=sel[0],out=c10);
    Mux(a=c[11],b=d[11],sel=sel[0],out=c11);
    Mux(a=c[12],b=d[12],sel=sel[0],out=c12);
    Mux(a=c[13],b=d[13],sel=sel[0],out=c13);
    Mux(a=c[14],b=d[14],sel=sel[0],out=c14);
    Mux(a=c[15],b=d[15],sel=sel[0],out=c15);
	
	
	Mux(a=e[0], b=f[0], sel=sel[0],out=e0);
    Mux(a=e[1], b=f[1], sel=sel[0],out=e1);
    Mux(a=e[2], b=f[2], sel=sel[0],out=e2);
    Mux(a=e[3], b=f[3], sel=sel[0],out=e3);
    Mux(a=e[4], b=f[4], sel=sel[0],out=e4);
    Mux(a=e[5], b=f[5], sel=sel[0],out=e5);
    Mux(a=e[6], b=f[6], sel=sel[0],out=e6);
    Mux(a=e[7], b=f[7], sel=sel[0],out=e7);
    Mux(a=e[8], b=f[8], sel=sel[0],out=e8);
    Mux(a=e[9], b=f[9], sel=sel[0],out=e9);
    Mux(a=e[10],b=f[10],sel=sel[0],out=e10);
    Mux(a=e[11],b=f[11],sel=sel[0],out=e11);
    Mux(a=e[12],b=f[12],sel=sel[0],out=e12);
    Mux(a=e[13],b=f[13],sel=sel[0],out=e13);
    Mux(a=e[14],b=f[14],sel=sel[0],out=e14);
    Mux(a=e[15],b=f[15],sel=sel[0],out=e15);
	
	Mux(a=g[0], b=h[0], sel=sel[0],out=g0);
    Mux(a=g[1], b=h[1], sel=sel[0],out=g1);
    Mux(a=g[2], b=h[2], sel=sel[0],out=g2);
    Mux(a=g[3], b=h[3], sel=sel[0],out=g3);
    Mux(a=g[4], b=h[4], sel=sel[0],out=g4);
    Mux(a=g[5], b=h[5], sel=sel[0],out=g5);
    Mux(a=g[6], b=h[6], sel=sel[0],out=g6);
    Mux(a=g[7], b=h[7], sel=sel[0],out=g7);
    Mux(a=g[8], b=h[8], sel=sel[0],out=g8);
    Mux(a=g[9], b=h[9], sel=sel[0],out=g9);
    Mux(a=g[10],b=h[10],sel=sel[0],out=g10);
    Mux(a=g[11],b=h[11],sel=sel[0],out=g11);
    Mux(a=g[12],b=h[12],sel=sel[0],out=g12);
    Mux(a=g[13],b=h[13],sel=sel[0],out=g13);
    Mux(a=g[14],b=h[14],sel=sel[0],out=g14);
    Mux(a=g[15],b=h[15],sel=sel[0],out=g15);
	
	
	Mux(a=a0, b=c0, sel=sel[1],out=aa0);
    Mux(a=a1, b=c1, sel=sel[1],out=aa1);
    Mux(a=a2, b=c2, sel=sel[1],out=aa2);
    Mux(a=a3, b=c3, sel=sel[1],out=aa3);
    Mux(a=a4, b=c4, sel=sel[1],out=aa4);
    Mux(a=a5, b=c5, sel=sel[1],out=aa5);
    Mux(a=a6, b=c6, sel=sel[1],out=aa6);
    Mux(a=a7, b=c7, sel=sel[1],out=aa7);
    Mux(a=a8, b=c8, sel=sel[1],out=aa8);
    Mux(a=a9, b=c9, sel=sel[1],out=aa9);
    Mux(a=a10,b=c10,sel=sel[1],out=aa10);
    Mux(a=a11,b=c11,sel=sel[1],out=aa11);
    Mux(a=a12,b=c12,sel=sel[1],out=aa12);
    Mux(a=a13,b=c13,sel=sel[1],out=aa13);
    Mux(a=a14,b=c14,sel=sel[1],out=aa14);
    Mux(a=a15,b=c15,sel=sel[1],out=aa15);
	
	
	Mux(a=e0, b=g0, sel=sel[1],out=ee0);
    Mux(a=e1, b=g1, sel=sel[1],out=ee1);
    Mux(a=e2, b=g2, sel=sel[1],out=ee2);
    Mux(a=e3, b=g3, sel=sel[1],out=ee3);
    Mux(a=e4, b=g4, sel=sel[1],out=ee4);
    Mux(a=e5, b=g5, sel=sel[1],out=ee5);
    Mux(a=e6, b=g6, sel=sel[1],out=ee6);
    Mux(a=e7, b=g7, sel=sel[1],out=ee7);
    Mux(a=e8, b=g8, sel=sel[1],out=ee8);
    Mux(a=e9, b=g9, sel=sel[1],out=ee9);
    Mux(a=e10,b=g10,sel=sel[1],out=ee10);
    Mux(a=e11,b=g11,sel=sel[1],out=ee11);
    Mux(a=e12,b=g12,sel=sel[1],out=ee12);
    Mux(a=e13,b=g13,sel=sel[1],out=ee13);
    Mux(a=e14,b=g14,sel=sel[1],out=ee14);
    Mux(a=e15,b=g15,sel=sel[1],out=ee15);
	
	Mux(a=aa0, b=ee0, sel=sel[2],out=out[0]);
    Mux(a=aa1, b=ee1, sel=sel[2],out=out[1]);
    Mux(a=aa2, b=ee2, sel=sel[2],out=out[2]);
    Mux(a=aa3, b=ee3, sel=sel[2],out=out[3]);
    Mux(a=aa4, b=ee4, sel=sel[2],out=out[4]);
    Mux(a=aa5, b=ee5, sel=sel[2],out=out[5]);
    Mux(a=aa6, b=ee6, sel=sel[2],out=out[6]);
    Mux(a=aa7, b=ee7, sel=sel[2],out=out[7]);
    Mux(a=aa8, b=ee8, sel=sel[2],out=out[8]);
    Mux(a=aa9, b=ee9, sel=sel[2],out=out[9]);
    Mux(a=aa10,b=ee10,sel=sel[2],out=out[10]);
    Mux(a=aa11,b=ee11,sel=sel[2],out=out[11]);
    Mux(a=aa12,b=ee12,sel=sel[2],out=out[12]);
    Mux(a=aa13,b=ee13,sel=sel[2],out=out[13]);
    Mux(a=aa14,b=ee14,sel=sel[2],out=out[14]);
    Mux(a=aa15,b=ee15,sel=sel[2],out=out[15]);
}