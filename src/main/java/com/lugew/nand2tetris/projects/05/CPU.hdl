// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//判断C指令还是A指令
	Not(in=instruction[15],out=notFlag);
	Mux16(a=returnOutM,b=instruction,sel=notFlag,out=aorC);
	//如果是A指令则放入A寄存器
	And(a=instruction[5],b=instruction[15],out=overrideARegister);
	Or(a=overrideARegister,b=notFlag,out=aFlag);
	ARegister(in=aorC,load=aFlag,out=outARegister,out[0..14]=currentAddress,out[0..14]=addressM);
	//如果是C指令并且a位域是1则把A寄存器的值当操作数,否则把inM当作操作数
	And(a=instruction[15],b=instruction[12],out=operateAOrInM);
	Mux16(a=outARegister,b=inM,sel=operateAOrInM,out=aOrM);
	//如果是C指令并且instruction[4]为1,则覆盖D寄存器的值
	And(a=instruction[15],b=instruction[4],out=overrideDRegister);
	DRegister(in=returnOutM,load=overrideDRegister,out=outDRegister);
	//计算xy
	ALU(
	x=outDRegister,
	y=aOrM,
	zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	 f=instruction[7],
	no=instruction[6],
	out=outM,
	zr=zr,
	ng=ng,
	out=returnOutM
	);
	
	
	

	//如果是C指令并且instruction[3](d1)为1,M[A]需要覆盖
	And(a=instruction[3],b=instruction[15],out=writeMFlag,out=writeM);	
	//如果是C指令并且instruction[5](d1)为1,A需要覆盖
	//And(a=instruction[5],b=instruction[15],out=overrideARegister);		
	//Mux16(a[0..14]=currentAddress,b=returnOutM,sel=overrideARegister,out=result);
	//Register(in=result,load=true,out=realCurrentAddress);
	//Mux16(a[0..14]=currentAddress,b=realCurrentAddress,sel=overrideARegister);
	
	//如果是C指令并且jump位instruction [1]=0,instruction[2]<0,instruction[0]>0 有一个是1,则执行跳转指令
	//计算正数标志
	Not(in=zr,out=notZr);
	Not(in=ng,out=notNg);
	And(a=notZr,b=notNg,out=positive);
	
	//如果是jump则跳转
	And(a=ng,b=instruction[2],out=loadFlagLT);
	And(a=positive,b=instruction[0],out=loadFlagGT);
	And(a=zr,b=instruction[1],out=loadFlagEQ);
	
	Or(a=loadFlagLT,b=loadFlagGT,out=loadFlagTemp0000);
	Or(a=loadFlagTemp0000,b=loadFlagEQ,out=loadFlagTemp1111);
	And(a=loadFlagTemp1111,b=instruction[15],out=loadFlag);

	//如果reset=1或者load=1,赋值,或者inc=1,加1或者不变
	Not(in=reset,out=notReset);
	And(a=loadFlag,b=notReset,out=loadFlagTemp);
	And(a=true,b=notReset,out=incFlagTemp);
	Not(in=loadFlagTemp,out=notLoadFlagTemp);
	And(a=notLoadFlagTemp,b=incFlagTemp,out= realIncFlag);
	PC(in[0..14]=currentAddress,load=loadFlagTemp,inc=realIncFlag,reset=reset,out[0..14]=pc);
}